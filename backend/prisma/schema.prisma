// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id                      String    @id @default(uuid())
  username                String    @unique
  fullName                String?
  email                   String    @unique
  isEmailVerified         Boolean?  @default(false)
  avatar                  String?   @default("https://via.placeholder.com/200x200.png")
  role                    UserRole  @default(USER)
  password                String
  refreshToken            String?
  forgotPasswordToken     String?
  forgotPasswordExpiry    DateTime?
  emailVerificationToken  String?
  emailVerificationExpiry DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  Problem       Problem[]
  Submission    Submission[]
  ProblemSolved ProblemSolved[]
  Playlist      Playlist[]
}

model Problem {
  id                 String     @id @default(uuid())
  title              String
  description        String
  difficulty         Difficulty
  tags               String[]
  userId             String
  examples           Json
  constraints        String
  hints              String?
  editorial          String?
  testcases          Json
  codeSnippets       Json
  referenceSolutions Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Realtionship
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  Submission        Submission[]
  SolvedBy          ProblemSolved[]
  ProblemInPlaylist ProblemInPlaylist[]

  @@unique([title])
}

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String // Accepted , Wrong, Runtime Error, Time Limit Exceeded
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem        Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  TestCaseResult TestCaseResult[]
}

model TestCaseResult {
  id            String  @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String @id @default(uuid())
  userId    String
  problemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Playlist {
  id          String   @id @default(uuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  problems ProblemInPlaylist[]
  user     User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
}

model ProblemInPlaylist {
  id         String   @id @default(uuid())
  playListId String
  problemId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  playlist Playlist @relation(fields: [playListId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playListId, problemId])
}
